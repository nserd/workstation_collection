#! /bin/python

import argparse, subprocess, time
from datetime import datetime, time as dt_time

def str_to_time(s):
    try:
        h, m = map(int, s.split(':'))
        return dt_time(h, m)
    except ValueError:
        print(f"Invalid time format: {s}. Use HH:MM.")
        exit(1)

def is_within_range(now, start_time, end_time):
    return start_time <= now <= end_time if start_time < end_time else now >= start_time or now <= end_time

def get_args():
    parser = argparse.ArgumentParser(description='Hyprsunset wrapper with the ability to set a time range.')
    parser.add_argument('time_range', type = str, help = 'Time range (HH:MM-HH:MM)')
    parser.add_argument('hyprsunset_args', nargs='*', help='Arguments to pass to hyprsunset')

    return parser.parse_args()

def start_hyprsunset(hypr_process, args):
    if hypr_process is None or hypr_process.poll() is not None:
        if hypr_process is not None:
            print(f"hyprsunset exited unexpectedly at {datetime.now()}")
        try:
            print(f"Started hyprsunset at {datetime.now()} with args: {args}")
            return subprocess.Popen(['hyprsunset'] + args)
        except Exception as e:
            print(f"Failed to start hyprsunset: {e}")
            return None

def stop_hyprsunset(hypr_process):
    if hypr_process is not None and hypr_process.poll() is None:
        hypr_process.terminate()
        hypr_process.wait()
        print(f"Stopped hyprsunset at {datetime.now()}")
        return None
    else:
        return hypr_process

def main():
    args = get_args()
    start_time = str_to_time(args.time_range.split('-')[0])
    end_time = str_to_time(args.time_range.split('-')[1])

    try:
        hypr_process = None
        while True:
            if is_within_range(datetime.now().time(), start_time, end_time):
                hypr_process = start_hyprsunset(hypr_process, args.hyprsunset_args)
            else:
                hypr_process = stop_hyprsunset(hypr_process)

            time.sleep(60)
    except KeyboardInterrupt:
        print('Stopped wrapper daemon by the user')
        exit(0)

if __name__ == "__main__":
    main()